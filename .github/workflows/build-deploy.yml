# This workflow will trigger on every push to the main branch, build the Docker image, and push it to AWS ECR, and deploy it to AWS ECS.
name: Eevees-Retreat Application

on:
  push: 
   branches:
      - 'main'
    
jobs:
    build:
        name: Build Image
        runs-on: ubuntu-latest

        steps: # sequence of tasks to be executed
            - name: Check out code 
            # Check the Dockerfile to build the docker image
              uses: actions/checkout@v2
            
            - name: Configure AWS credentials 
            # Programmatic authentication to aws
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ secrets.AWS_REGION }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Build, tag, and push image to Amazon ECR 
            # copying the code from repo i.e. Dockerfile, versioning 
            # the docker image, and pushing it to ECR.
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: eevees_retreat_app
                IMAGE_TAG: latest
              run: |
                docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

            - name: Download and clean task definition
              run: |
                aws ecs describe-task-definition \
                  --task-definition ${{ secrets.ECS_CONTAINER_DEFINITION }} \
                  --query 'taskDefinition' \
                  --output json > raw-task-definition.json

                jq 'del(.revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .taskDefinitionArn)' raw-task-definition.json > task-definition.json


            - name: Fill in the new image ID in the Amazon ECS task definition
              id: task-def
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                task-definition: task-definition.json
                container-name: ${{ secrets.CONTAINER_NAME }}
                image: 518002995474.dkr.ecr.ap-southeast-1.amazonaws.com/eevees_retreat_app:latest
          
            - name: Deploy Amazon ECS task definition
              uses: aws-actions/amazon-ecs-deploy-task-definition@v1
              with:
                task-definition: ${{ steps.task-def.outputs.task-definition }}
                service: ${{ secrets.ECS_SERVICE }}
                cluster: ${{ secrets.ECS_CLUSTER }}
                wait-for-service-stability: true