name: Eevees-Retreat Application

on:
  workflow_run:
    workflows: ["Eevees-Retreat Build and Test"]
    types:
      - completed

jobs:
  buid-deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: Build and Deploy
    runs-on: ubuntu-latest
    environment:
      name: EC2
    steps:
      - name: Set up AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -o awscliv2.zip
          sudo ./aws/install --update

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Launch EC2 Instance
        id: launch
        run: |
          AMI_ID=$(aws ec2 describe-images --owners amazon \
            --filters "Name=name,Values=ubuntu/images/hvm-ssd-gp3/ubuntu-noble-24.04-amd64-server-*" \
            --query 'Images[*].[ImageId,CreationDate]' \
            --output text | sort -k2 -r | head -n1 | awk '{print $1}')

          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id $AMI_ID \
            --instance-type t2.micro \
            --key-name Eevees-Retreat \
            --security-groups default \
            --query 'Instances[0].InstanceId' \
            --output text)

          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

          # Tag the instance
          aws ec2 create-tags --resources $INSTANCE_ID --tags Key=Name,Value=Eevees-Retreat

          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text)

          echo PUBLIC IP = ${PUBLIC_IP}

          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Save PEM file
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY_PAIR }}" > ~/.ssh/ec2-key-pair.pem
          chmod 600 ~/.ssh/ec2-key-pair.pem

      - name: Wait for EC2 finish connect
        run: |
          echo "Waiting for SSH at $PUBLIC_IP..."
          for i in {1..6}; do
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2-key-pair.pem ubuntu@$PUBLIC_IP 'echo ready' && break
            echo "Retrying SSH..."
            sleep 10
          done

      - name: Deploy app on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2-key-pair.pem ubuntu@$PUBLIC_IP << EOF
            #Set public ip to replace in env file later 
            PUBLIC_IP=${PUBLIC_IP}
            echo PUBLIC IP = ${PUBLIC_IP}

            echo "🔧 Installing dependencies..."

            # Update & install Node.js
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get update
            sudo apt-get install -y nodejs

            # Install Java & Maven
            sudo apt-get install -y openjdk-17-jdk maven git

            echo "✅ Dependencies installed"
                  
            # Clone the main branch
            git clone -b main https://${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }} project
            cd project

            # === Frontend ===
            echo "⚙️ Setting up frontend..."
            cd frontend/Hotel-booking-application
            sed -i "s|VITE_API_URL=http://localhost:8080|VITE_API_URL=http://$PUBLIC_IP:8080|" .env
            npm install
            npm run build
            npm install -g serve
            nohup serve -s dist -l 5173 > frontend.log 2>&1 &
            # nohup npm run dev -- --host > frontend.log 2>&1 &

            # === Backend ===
            echo "⚙️ Setting up backend..."
            cd ../../backend/HotelBookingApplication
            chmod +x mvnw
            ./mvnw clean install -DskipTests
            nohup mvn spring-boot:run -DskipTests > backend.log 2>&1 &

            echo "🚀 Deployment complete."
            echo "🔗 Frontend: http://$PUBLIC_IP:5173"
          EOF
