name: Eevees-Retreat Build and Test

on:
  push:
    branches:
      - main

permissions:
  contents: read
  security-events: write

jobs:
  # 1. Lint and Run React app
  FrontendBuild:
    name: Frontend Build & Smoke Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install frontend dependencies
        working-directory: frontend/Hotel-booking-application
        run: npm install

      - name: Run ESLint
        working-directory: frontend/Hotel-booking-application
        run: npm run lint

      - name: Start Frontend App
        working-directory: frontend/Hotel-booking-application
        run: |
          nohup npm run dev -- --host 127.0.0.1 --port 5173 > frontend.log 2>&1 &
          sleep 10

      - name: Smoke Check
        run: curl -sSf http://127.0.0.1:5173

  # 2. SAST Static Analysis
  SASTScan:
    name: OWASP SAST Scan (Semgrep → SARIF)
    needs: FrontendBuild
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Semgrep
        run: pip install semgrep

      - name: Run Semgrep Scan to SARIF
        run: |
          semgrep scan \
            --config auto \
            --sarif \
            --output semgrep-report.sarif \
            .

      - name: Upload Semgrep SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-report.sarif
          checkout_path: .
        
      - name: Upload Semgrep SARIF artifact
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-sarif
          path: semgrep-report.sarif


  # # ------------ Rerun Later for AfterReview (OWASP Dependency-Check) ------------
  # # 3. OWASP Dependency-Check
  # DependencyCheck:
  #   name: OWASP Dependency-Check
  #   runs-on: ubuntu-latest
  #   needs: FrontendBuild

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Set up Java
  #       uses: actions/setup-java@v3
  #       with:
  #         distribution: temurin
  #         java-version: "17"

  #     - name: Run Dependency-Check
  #       working-directory: backend/HotelBookingApplication
  #       run: |
  #         mvn org.owasp:dependency-check-maven:check \
  #           -Ddependency-check.failBuildOnCVSS=7 \
  #           -Dformats=ALL

  #     - name: Upload Dependency-Check report
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: dependency-check-report
  #         path: backend/HotelBookingApplication/target/dependency-check-report.*

  # ------------------------------------------------------------------------------------

  # 4. OWASP ZAP (dynamic scan against both frontend+backend)
  SecurityScan:
    name: OWASP ZAP Full Scan
    runs-on: ubuntu-latest
    needs: FrontendBuild

    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_DATABASE: eevee_retreat
          MYSQL_USER: admin
          MYSQL_PASSWORD: Password
          MYSQL_ROOT_PASSWORD: Password
        options: >-
          --health-cmd="mysqladmin ping -h localhost -p$Password"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Frontend
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install frontend dependencies
        working-directory: frontend/Hotel-booking-application
        run: npm install

      - name: Start Frontend App
        working-directory: frontend/Hotel-booking-application
        run: |
          nohup npm run dev -- --host 0.0.0.0 --port 5173 \
            > zap-frontend.log 2>&1 &
          echo "Waiting for frontend to start…" && sleep 15

      - name: Smoke-check Frontend
        run: |
          curl --retry 5 --retry-connrefused --retry-delay 5 \
               -sSf http://127.0.0.1:5173


      # Backend
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: "17"

      - name: Build and start Spring Boot JAR
        working-directory: backend/HotelBookingApplication
        env:
          # SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1
          # SPRING_DATASOURCE_DRIVER-CLASS-NAME: org.h2.Driver
          # SPRING_JPA_HIBERNATE_DDL-AUTO: create-drop
          SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/eevee_retreat
          SPRING_DATASOURCE_USERNAME: admin
          SPRING_DATASOURCE_PASSWORD: Password 
          SPRING_DATASOURCE_DRIVER-CLASS-NAME: com.mysql.cj.jdbc.Driver
        run: |
          mvn clean package -DskipTests=true
          JAR=$(ls target/*-SNAPSHOT.jar)
          nohup java -jar "$JAR" --server.address=0.0.0.0 \
            > zap-backend.log 2>&1 &
          sleep 5
      
      - name: Wait for Backend to Start
        working-directory: backend/HotelBookingApplication
        run: |
          for i in {1..20}; do
            curl -sSf http://127.0.0.1:8080/rooms/all-rooms && exit 0
            echo "Waiting for backend… ($i/20)"
            sleep 5
          done
          echo "Backend failed to start" && exit 1
  
      - name: Print Backend Logs on Failure
        if: failure()
        working-directory: backend/HotelBookingApplication
        run: cat zap-backend.log
          
      # ZAP Scan
      # - name: Run ZAP full scan
      #   uses: zaproxy/action-full-scan@v0.6.0
      #   with:
      #     target: 'http://127.0.0.1:8080'
      #     cmd_options: '-t http://127.0.0.1:8080 -r zap-report.html'
      #     docker_name: ghcr.io/zaproxy/zaproxy:stable
      #     issue_title: ZAP Full Scan Report
      #     fail_action: false
      #     allow_issue_writing: true
      
      # - name: Run ZAP full scan
      #   uses: zaproxy/action-full-scan@v0.6.0
      #   with:
      #     target: 'http://127.0.0.1:8080'
      #     cmd_options: -t http://127.0.0.1:8080 -r zap-report.html -I
      #     docker_name: ghcr.io/zaproxy/zaproxy:stable
      #     allow_issue_writing: true

      # # Upload report
      # - uses: actions/upload-artifact@v4
      #   with:
      #     name: zap-report
      #     path: zap-report.html

      - name: Create reports directory
        run: mkdir -p reports

      - name: Create ZAP Ignore Policy File
        run: |
          cat <<EOF > zap-ignore-context.context
          {
            "alertFilters": [
              {
                "ruleId": "10049",
                "newRisk": "FalsePositive",
                "url": "http://127.0.0.1:8080"
              },
              {
                "ruleId": "10049",
                "newRisk": "FalsePositive",
                "url": "http://127.0.0.1:8080/"
              },
              {
                "ruleId": "10049",
                "newRisk": "FalsePositive",
                "url": "http://127.0.0.1:8080/robots.txt"
              },
              {
                "ruleId": "10049",
                "newRisk": "FalsePositive",
                "url": "http://127.0.0.1:8080/sitemap.xml"
              }
            ]
          }
          EOF

      - name: Run OWASP ZAP Full Scan
        run: |
          docker run \
            --user root \
            --network="host" \
            -v $(pwd)/zap-ignore-context.context:/zap/wrk/zap-ignore-context.context:rw \
            -v $(pwd)/zap-reports:/zap/wrk/:rw \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-full-scan.py \
            -t http://127.0.0.1:8080 \
            -J zap-report.json \
            -w zap-report.md \
            -r zap-report.html \
            -I \
            -c zap-ignore-context.context

      - name: Upload ZAP Reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-reports
          path: zap-reports/

  # # 5. Backend Maven install > unit & e2e
  # BackendTest:
  #   name: Backend Test Suite
  #   runs-on: ubuntu-latest
  #   needs:
  #     # - DependencyCheck
  #     - SecurityScan

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Set up Java
  #       uses: actions/setup-java@v3
  #       with:
  #         distribution: "temurin"
  #         java-version: "17"

  #     - name: Install Maven dependencies
  #       working-directory: backend/HotelBookingApplication
  #       run: mvn install -DskipTests=true

  #     - name: Run Unit Tests (Backend)
  #       working-directory: backend/HotelBookingApplication
  #       run: mvn test -Dgroups="!selenium"

  #     - name: Run Selenium E2E Tests
  #       working-directory: backend/HotelBookingApplication
  #       run: mvn test -Dgroups="selenium"